// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/gnarkprover.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class GnarkProverBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  GnarkProverBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  GnarkProverBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void enforce_binding() {
    return _enforce_binding();
  }

  late final _enforce_bindingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('enforce_binding');
  late final _enforce_binding =
      _enforce_bindingPtr.asFunction<void Function()>();

  void Init() {
    return _Init();
  }

  late final _InitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Init');
  late final _Init = _InitPtr.asFunction<void Function()>();

  int InitComplete() {
    return _InitComplete();
  }

  late final _InitCompletePtr =
      _lookup<ffi.NativeFunction<GoUint8 Function()>>('InitComplete');
  late final _InitComplete = _InitCompletePtr.asFunction<int Function()>();

  void Free(
    ffi.Pointer<ffi.Uint8> pointer,
  ) {
    return _Free(
      pointer,
    );
  }

  late final _FreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>)>>(
          'Free');
  late final _Free =
      _FreePtr.asFunction<void Function(ffi.Pointer<ffi.Uint8>)>();

  Prove_return Prove(
    GoSlice params,
  ) {
    return _Prove(
      params,
    );
  }

  late final _ProvePtr =
      _lookup<ffi.NativeFunction<Prove_return Function(GoSlice)>>('Prove');
  late final _Prove = _ProvePtr.asFunction<Prove_return Function(GoSlice)>();
}

final class _GoString_ extends ffi.Struct {
  external ffi.Pointer<ffi.Char> p;

  @ptrdiff_t()
  external int n;
}

typedef ptrdiff_t = __darwin_ptrdiff_t;
typedef __darwin_ptrdiff_t = ffi.Long;
typedef Dart__darwin_ptrdiff_t = int;

final class GoInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> t;

  external ffi.Pointer<ffi.Void> v;
}

final class GoSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> data;

  @GoInt()
  external int len;

  @GoInt()
  external int cap;
}

typedef GoInt = GoInt64;
typedef GoInt64 = ffi.LongLong;
typedef DartGoInt64 = int;
typedef GoUint8 = ffi.UnsignedChar;
typedef DartGoUint8 = int;

/// Return type for Prove
final class Prove_return extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> r0;

  @GoInt()
  external int r1;
}
